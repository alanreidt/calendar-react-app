{"version":3,"sources":["utils/helpers.js","utils/constants.js","components/Box/Box.js","components/Box/index.js","components/DayTab.js","components/CopyButton.js","components/Task.js","components/TaskList.js","components/TaskPanel.js","components/DayTabs.js","App.js","serviceWorker.js","index.js"],"names":["weekTasksReducer","state","action","type","map","dayTasks","dayIndex","payload","self","targetIndex","sourceIndex","newDayTasks","sort","a","b","date","composeNewDayTasks","getTodayDayIndex","moment","isoWeekday","normalizeDate","add","LOCAL_STORAGE_ITEM_NAME","TIME_FORMAT","todayDayIndex","WeekTasksDispatch","createContext","Types","Box","props","className","children","DayTab","text","useDrop","accept","drop","item","monitor","index","dropRef","ref","CopyButton","restProps","dispatch","useContext","useDrag","end","didDrop","dropResult","getDropResult","collect","opacity","isDragging","dragRef","style","cursor","CopyOutlined","Task","id","expired","button","generateName","name","undefined","generateNameByIndex","formControlClassName","data-flip-id","display","marginBottom","align","Item","rules","required","message","placeholder","format","allowClear","hidden","TaskList","initialTasks","taskDueDate","Form","useForm","form","useEffect","setFieldsValue","tasks","expirationDate","checkIsDateExpired","initialValues","onFinish","sortedTasks","autoComplete","List","fields","remove","field","taskID","removeButton","title","MinusCircleOutlined","onClick","setTimeout","submit","handleRemove","key","htmlType","TaskPanel","resetFields","getFieldsValue","PlusOutlined","length","uuid","block","TabPane","Tabs","DayTabs","weekTasks","dayNames","useFlip","useState","now","setNow","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","defaultActiveKey","String","tabPosition","centered","dayName","dayTab","padding","tab","Container","maxWidth","data-flip-root-id","direction","size","textAlign","App","initialWeekTasks","useReducer","localStorage","setItem","JSON","stringify","value","isValid","DndProvider","backend","HTML5Backend","Provider","paddingTop","Boolean","window","location","hostname","match","parse","getItem","Array","fill","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.be5dfed8.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\nimport moment from 'moment';\nimport { v4 as uuid } from 'uuid';\n\nimport { LOCAL_STORAGE_ITEM_NAME, TIME_FORMAT } from './constants';\n\n// source: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst composeNewDayTasks = (dayTasks, newDayTasks) => (\n  [...dayTasks, ...newDayTasks].sort((a, b) => a.date - b.date)\n);\n\nfunction weekTasksReducer(state, action) {\n  switch (action.type) {\n    case 'update':\n      return state.map(\n        (dayTasks, dayIndex) => dayIndex === action.payload.dayIndex\n          ? action.payload.dayTasks\n          : dayTasks\n      );\n    case 'copy':\n      return state.map(\n        (dayTasks, dayIndex, self) => dayIndex === action.payload.targetIndex\n          ? self[action.payload.sourceIndex]\n          : dayTasks\n      );\n    case 'add':\n      return state.map(\n        (dayTasks, dayIndex) => dayIndex === action.payload.dayIndex\n          ? composeNewDayTasks(dayTasks, action.payload.dayTasks)\n          : dayTasks\n      );\n    default:\n  }\n}\n\nconst generateId = (index) => uuid();\nconst generateNameByIndex = (index) => (name) => index !== undefined ? [index, name] : name;\nconst getTodayDayIndex = () => moment().isoWeekday() - 1;\nconst normalizeDate = (date, dayIndex) => moment(date).add(dayIndex - getTodayDayIndex(), 'd');\nconst checkIsDateExpiredBy = (expirationDate) => (date) => date < expirationDate;\nconst getTime = (date) => (\n  moment(date).isValid()\n    ? moment(date).format(TIME_FORMAT)\n    : date\n);\n\nconst populateWeekTasks = () => {\n  const DAYS_IN_WEEK = 7;\n\n  return JSON.stringify(Array(DAYS_IN_WEEK).fill([]));\n};\nconst getWeekTasks = () => {\n  const weekTasks = localStorage.getItem(LOCAL_STORAGE_ITEM_NAME);\n\n  return weekTasks || populateWeekTasks();\n};\n\nexport {\n  useInterval,\n  weekTasksReducer,\n  getTime,\n  generateId,\n  generateNameByIndex,\n  getTodayDayIndex,\n  normalizeDate,\n  checkIsDateExpiredBy,\n  getWeekTasks,\n};\n","import { createContext } from 'react';\nimport { getTodayDayIndex } from './helpers';\n\nconst LOCAL_STORAGE_ITEM_NAME = 'weekTasks';\nconst DAY_NAMES = [\n  'Пн',\n  'Вт',\n  'Ср',\n  'Чт',\n  'Пт',\n  'Сб',\n  'Вс',\n];\nconst TIME_FORMAT = \"HH:mm\";\nconst todayDayIndex = getTodayDayIndex();\n\nconst FLIP_ROOT_ID = \"flip-root\";\n\nconst WeekTasksDispatch = createContext(null);\n\nconst Types = {\n  LIST: 'list',\n};\n\nexport {\n  LOCAL_STORAGE_ITEM_NAME,\n  DAY_NAMES,\n  TIME_FORMAT,\n  FLIP_ROOT_ID,\n  todayDayIndex,\n  WeekTasksDispatch,\n  Types,\n};\n","import React from 'react';\n\nimport './Box.css';\n\nfunction Box(props) {\n  return (\n    <div className=\"Box\" {...props}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Box;\n","import Box from './Box';\n\nexport default Box;\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\n\nimport { Types } from '../utils/constants';\n\nfunction DayTab({ dayIndex, text }) {\n  const [, dropRef] = useDrop({\n    accept: Types.LIST,\n    drop: (item, monitor) => ({\n      index: dayIndex,\n    }),\n  });\n\n  return (\n    <span ref={dropRef}>{text}</span>\n  );\n}\n\nexport default DayTab;\n","import React, { useContext } from 'react';\nimport { useDrag } from 'react-dnd';\n\nimport { Button } from 'antd';\nimport { CopyOutlined } from '@ant-design/icons';\n\nimport { Types, WeekTasksDispatch } from '../utils/constants';\n\nfunction CopyButton({ dayIndex, ...restProps }) {\n  const dispatch = useContext(WeekTasksDispatch);\n\n  const [{ opacity }, dragRef] = useDrag({\n    item: {\n      type: Types.LIST,\n      index: dayIndex,\n    },\n    end: (item, monitor) => {\n      if (!monitor.didDrop()) {\n        return\n      }\n\n      // When dropped on a compatible target, do something\n      const dropResult = monitor.getDropResult()\n\n      dispatch({\n        type: 'copy',\n        payload: {\n          sourceIndex: item.index,\n          targetIndex: dropResult.index,\n        },\n      });\n    },\n    collect: (monitor) => ({\n      opacity: monitor.isDragging() ? 0.5 : 1,\n    }),\n  });\n\n  const style = {\n    opacity,\n    cursor: 'grab',\n  };\n\n  return (\n    <Button ref={dragRef} style={style} {...restProps}>\n      <CopyOutlined /> Copy to\n    </Button>\n  );\n}\n\nexport default CopyButton;\n","import React from 'react';\nimport { Form, TimePicker, Input, Space } from 'antd';\n\nimport { TIME_FORMAT } from '../utils/constants';\nimport { generateNameByIndex } from '../utils/helpers';\n\nfunction Task({ id, index, expired = false, button = null }) {\n  const generateName = generateNameByIndex(index);\n  const formControlClassName = `form-control ${expired ? 'form-control_expired' : ''}`;\n\n  return (\n    <Space data-flip-id={`id-${id}`} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\n      <Form.Item\n        name={generateName('date')}\n        rules={[{ required: true, message: 'Missing a task date' }]}\n      >\n        <TimePicker className={formControlClassName} placeholder={TIME_FORMAT} format={TIME_FORMAT} />\n      </Form.Item>\n      <Form.Item\n        name={generateName('name')}\n        rules={[{ required: true, message: 'Missing a task name' }]}\n      >\n        <Input className={formControlClassName} placeholder=\"Введите задачу\" allowClear />\n      </Form.Item>\n      <Form.Item\n        name={generateName('id')}\n        hidden\n      >\n        <Input />\n      </Form.Item>\n\n      {button}\n    </Space>\n  );\n}\n\nexport default Task;\n","import React, { useEffect, useContext } from 'react';\n\nimport { Form, Button } from 'antd';\nimport { MinusCircleOutlined } from '@ant-design/icons';\n\nimport { checkIsDateExpiredBy, normalizeDate } from '../utils/helpers';\nimport { WeekTasksDispatch } from '../utils/constants';\nimport Task from './Task';\n\nfunction TaskList({ initialTasks = [], dayIndex, taskDueDate }) {\n  const dispatch = useContext(WeekTasksDispatch);\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    // Synchronize initialTasks update manually, 'cause form ignores it by default\n    form.setFieldsValue({ tasks: initialTasks });\n  }, [form, initialTasks]);\n\n  const handleFinish = ({ tasks }) => {\n    const sortedTasks = tasks.sort((a, b) => a.date - b.date);\n\n    dispatch({\n      type: 'update',\n      payload: {\n        dayIndex,\n        dayTasks: sortedTasks,\n      },\n    });\n  };\n\n  const handleRemove = (index, remove) => {\n    remove(index);\n\n    // Give time for the form to remove the item\n    // Validation yields error otherwise\n    setTimeout(() => {\n      // Synchronize the App state through the onFinish callback\n      form.submit()\n    }, 0);\n  }\n\n  const checkIsDateExpired = checkIsDateExpiredBy(taskDueDate);\n\n  return (\n    <div className=\"TaskList\">\n      <Form\n        form={form}\n        name=\"task-list-form\"\n        initialValues={{ tasks: initialTasks }}\n        onFinish={handleFinish}\n        autoComplete=\"off\"\n      >\n        <Form.List name=\"tasks\">\n          {(fields, { remove }) => {\n            return (\n              <div>\n                {fields.map((field, index) => {\n                  const taskID = initialTasks[index].id;\n                  const removeButton = (\n                    <Button title=\"remove\">\n                      <MinusCircleOutlined\n                        onClick={() => {\n                          handleRemove(index, remove);\n                        }}\n                      />\n                    </Button>\n                  );\n\n                  return (\n                    <Task\n                      key={taskID}\n                      id={taskID}\n                      index={index}\n                      expired={checkIsDateExpired(\n                        normalizeDate(initialTasks[index].date, dayIndex)\n                      )}\n                      button={removeButton}\n                    />\n                  )\n                })}\n              </div>\n            );\n          }}\n        </Form.List>\n\n        <Form.Item hidden>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React, { useContext } from 'react';\nimport { Form, Button } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport { generateId } from '../utils/helpers';\nimport { WeekTasksDispatch } from '../utils/constants';\nimport Task from './Task';\n\nfunction TaskPanel({ dayIndex }) {\n  const dispatch = useContext(WeekTasksDispatch);\n  const [form] = Form.useForm();\n\n  const handleFinish = ({ tasks }) => {\n    dispatch({\n      type: 'add',\n      payload: {\n        dayIndex,\n        dayTasks: tasks,\n      },\n    });\n\n    form.resetFields();\n  };\n\n  return (\n    <div className=\"TaskPanel\">\n      <Form\n        form={form}\n        name=\"task-panel-form\"\n        onFinish={handleFinish}\n        autoComplete=\"off\"\n      >\n        <Form.List name=\"tasks\">\n          {(fields, { add }) => {\n            return (\n              <div>\n                {fields.map((field, index) => {\n                  const { tasks } = form.getFieldsValue();\n                  const taskID = tasks[index].id;\n\n                  return (\n                    <Task\n                      key={taskID}\n                      id={taskID}\n                      index={index}\n                      button={\n                        <Form.Item>\n                          <Button htmlType=\"submit\">\n                            <PlusOutlined />\n                          </Button>\n                        </Form.Item>\n                      }\n                    />\n                  );\n                })}\n\n                {fields.length <= 0 && (\n                  <Form.Item>\n                    <Button\n                      onClick={() => {\n                        add({\n                          name: '',\n                          date: '',\n                          id: generateId(),\n                        });\n                      }}\n                      block\n                    >\n                      <PlusOutlined /> Add field\n                    </Button>\n                  </Form.Item>\n                )}\n              </div>\n            );\n          }}\n        </Form.List>\n      </Form>\n    </div>\n  );\n};\n\nexport default TaskPanel;\n","import React, { useState } from 'react';\nimport moment from 'moment';\n\nimport { Container } from '@material-ui/core';\nimport { useFlip } from 'react-easy-flip';\nimport { Space, Tabs } from 'antd';\n\nimport { useInterval } from '../utils/helpers';\nimport { FLIP_ROOT_ID } from '../utils/constants';\nimport Box from './Box';\nimport DayTab from './DayTab';\nimport CopyButton from './CopyButton';\nimport TaskList from './TaskList';\nimport TaskPanel from './TaskPanel';\n\nconst { TabPane } = Tabs;\n\nfunction DayTabs({ weekTasks, dayNames, todayDayIndex }) {\n  useFlip(FLIP_ROOT_ID);\n\n  const [now, setNow] = useState(moment());\n\n  useInterval(() => {\n    setNow(moment());\n  }, 1000);\n\n  return (\n    <Tabs defaultActiveKey={String(todayDayIndex)} tabPosition=\"right\" centered>\n      {dayNames.map((dayName, dayIndex) => {\n        const dayTasks = weekTasks[dayIndex];\n        const dayTab = <DayTab dayIndex={dayIndex} text={dayName} />;\n\n        return (\n          <TabPane style={{ padding: 0, }} tab={dayTab} key={dayIndex}>\n            <Container maxWidth=\"sm\">\n              <Box>\n                <Space data-flip-root-id={FLIP_ROOT_ID} direction=\"vertical\" size=\"large\">\n                  <div style={{ textAlign: 'right' }}>\n                    <CopyButton\n                      dayIndex={dayIndex}\n                    />\n                  </div>\n                  <TaskList\n                    dayIndex={dayIndex}\n                    initialTasks={dayTasks}\n                    taskDueDate={now}\n                  />\n                  <TaskPanel\n                    dayIndex={dayIndex}\n                  />\n                </Space>\n              </Box>\n            </Container>\n          </TabPane>\n        );\n      })}\n    </Tabs>\n  );\n}\n\nexport default DayTabs;\n","import React, { useEffect, useReducer } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { FlipProvider } from 'react-easy-flip';\nimport { Container } from '@material-ui/core';\n\nimport { weekTasksReducer, getTime } from './utils/helpers';\nimport { LOCAL_STORAGE_ITEM_NAME, WeekTasksDispatch } from './utils/constants';\nimport DayTabs from './components/DayTabs';\n\nimport './App.css';\n\nfunction App({ initialWeekTasks = [], dayNames, todayDayIndex }) {\n  const [weekTasks, dispatch] = useReducer(weekTasksReducer, initialWeekTasks);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_ITEM_NAME, JSON.stringify(\n      weekTasks,\n      (key, value) => key === 'date' ? getTime(value) : value\n    ));\n  });\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <FlipProvider>\n        <WeekTasksDispatch.Provider value={dispatch}>\n          <div className=\"App\">\n            <Container maxWidth=\"lg\" style={{ paddingTop: 100, }}>\n              <DayTabs\n                weekTasks={weekTasks}\n                dayNames={dayNames}\n                todayDayIndex={todayDayIndex}\n              />\n            </Container>\n          </div>\n        </WeekTasksDispatch.Provider>\n      </FlipProvider>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport moment from 'moment';\n\nimport { DAY_NAMES, todayDayIndex, TIME_FORMAT } from './utils/constants';\nimport { getWeekTasks } from './utils/helpers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nconst weekTasks = JSON.parse(\n  getWeekTasks(),\n  (key, value) => key === 'date' ? moment(value, TIME_FORMAT) : value,\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      initialWeekTasks={weekTasks}\n      dayNames={DAY_NAMES}\n      todayDayIndex={todayDayIndex}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}